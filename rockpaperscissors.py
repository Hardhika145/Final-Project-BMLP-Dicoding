# -*- coding: utf-8 -*-
"""CNN_Kertas_Batu_Gunting.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fYxsgp4xn4Ei6iXlBTtLNLBzWZxaPC0S

# **Proyek Akhir : Klasifikasi Gambar**

1. Nama         : Hardhika Putra Pramudya
2. Email        : hppramudya145@gmail.com
3. Id Dicoding  : hardhika_145
4. Program      : IDCamp 2023 Data Scientist Learning Path

## Memasang Library
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
# %matplotlib inline

"""## Memasang Library Deep Learning"""

import tensorflow as tf
from google.colab import files
from tensorflow.keras.preprocessing import image
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Dropout, Conv2D, Activation, Flatten, MaxPool2D
from tensorflow.keras.optimizers import Adam

print(tf.__version__)

"""## Load Image Data"""

!wget --no-check-certificate \
    https://github.com/dicodingacademy/assets/releases/download/release/rockpaperscissors.zip  \
    -O /tmp/rockpaperscissors.zip

import zipfile

local_zip = '/tmp/rockpaperscissors.zip'
zip_ref = zipfile.ZipFile(local_zip, 'r')
zip_ref.extractall('/tmp/rockpaperscissors')
zip_ref.close()

base_dir = '/tmp/rockpaperscissors/rockpaperscissors/rps-cv-images'

"""## Membagi data menjadi data_train dan data_validation"""

from tensorflow.keras.preprocessing.image import ImageDataGenerator

train_datagen = ImageDataGenerator(
                    rescale=1./255,
                    rotation_range=20,
                    horizontal_flip=True,
                    zoom_range=0.2,
                    shear_range=0.2,
                    validation_split=0.4,
                    fill_mode = 'nearest'
                    )

train_generator = train_datagen.flow_from_directory(
        base_dir,
        target_size=(100, 150),
        batch_size=32,
        class_mode=("categorical"),
        subset=("training"))

validation_generator = train_datagen.flow_from_directory(
                       base_dir,
                       target_size=(100, 150),
                       batch_size=32,
                       class_mode=('categorical'),
                       subset=('validation'))

"""## Making Model"""

model = tf.keras.models.Sequential([

    tf.keras.layers.Conv2D(16, (3,3), activation='relu', input_shape=(100, 150, 3)),
    tf.keras.layers.MaxPooling2D(2, 2),

    tf.keras.layers.Conv2D(32, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),

    tf.keras.layers.Conv2D(64, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),

    tf.keras.layers.Flatten(),
    tf.keras.layers.Dropout(0.5),

    tf.keras.layers.Dense(512, activation='relu'),
    tf.keras.layers.Dense(256, activation='relu'),
    tf.keras.layers.Dense(128, activation='relu'),
    tf.keras.layers.Dense(3, activation='softmax')
    ])

"""## Compile and Model Fit"""

model.compile(loss='categorical_crossentropy',
              optimizer=tf.optimizers.Adam(),
              metrics=['accuracy'])

class myCallback(tf.keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs={}):
    if(logs.get('accuracy')>0.95):
      print('\nAccuracy has reached >95%!')
      self.model.stop_training = True
callbacks=myCallback()

model.fit(
      train_generator,
      steps_per_epoch=41,
      epochs=30,
      validation_data=validation_generator,
      validation_steps=27,
      callbacks=[callbacks],
      verbose=2)

uploaded = files.upload()

for fn in uploaded.keys():

  # predicting images
  path = fn
  img = image.load_img(path, target_size=(100,150))
  imgplot = plt.imshow(img)
  x = image.img_to_array(img)
  x = np.expand_dims(x, axis=0)

  images = np.vstack([x])
  classes = model.predict(images, batch_size=10)

  print(fn)
  if classes[0][0]==1:
    print('scissors')
  elif classes[0][1]==1:
    print('paper')
  elif classes[0][2]==1:
    print('rock')
  else :
    print('unknown')